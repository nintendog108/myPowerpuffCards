@startuml
skinparam classAttributeIconSize 0
skinparam packageStyle rectangle
skinparam backgroundColor #9


package "thePowerpuffCards" {
    package "api.controller" {
        class SessionController {
            - Database database
            + handleRequest(String method, String path, String body, BufferedWriter out)
        }
        class UserController {
            - Database database
            + handleRequest(String method, String path, String body, BufferedWriter out)
        }
    }

    package "database" {
        class Database {
            - Map<String, User> userStorage
            - Map<String, Session> sessionStorage
            + addUser(User user)
            + addSession(Session session)
            + findUser(String username)
            + findUserByUsernameAndPassword(String username, String password)
            + getAllSessions()
            + removeSessionById(String sessionId)
        }
    }

    package "server" {
        class HttpServer {
            - ExecutorService threadPool
            - UserController userController
            - SessionController sessionController
            + start(int port)
        }
        class ClientHandler {
            - Socket clientSocket
            - UserController userController
            - SessionController sessionController
            + run()
        }
    }

    package "services.models" {
        class User {
            - String username
            - String password
            - int coins
            - Stack stack
            - Deck deck
            - int ELO
            - String token
            + getUsername()
            + getPassword()
            + setUsername(String username)
            + setPassword(String password)
        }

        class Session {
            - String sessionId
            - String username
            + getSessionId()
            + getUsername()
        }

        package "cards" {
            abstract class Card {
                - String name
                - int damage
                - ElementType type
                + getName()
                + getDamage()
                + getElementType()
            }

            class CardPile {
                - List<Card> cards
                + addCard(Card card)
                + removeCard(Card card)
                + getCards(): List<Card>
                + size(): int
            }

            class Deck extends CardPile {
                + defineDeck(List<Card> selectedCards)
                + isValidDeck(): boolean
                + selectBestCardsFromCollection(List<Card> collection)
            }

            class Stack extends CardPile {
                + showStack()
                + countCardsByElement(ElementType elementType)
            }

            class Package {
                - List<Card> cards
                + getCards(): List<Card>
            }

            class ElementType {
                FIRE
                WATER
                EARTH
                WIND
                DIVINE
            }

            class MonsterCard extends Card {
                - MonsterType monsterType
                + getMonsterType(): String
            }

            class SpellCard extends Card {
                + getSpellEffect(): String
            }

            class MonsterType {
                DRAGON
                GOBLIN
                ORK
                WIZARD
                KNIGHT
            }
        }
    }

    package "services" {
        class BattleService {
            - List<Card> player1Deck
            - List<Card> player2Deck
            - String player1
            - String player2
            - static int MAX_ROUNDS = 100
            + startBattle()
            - calculateRoundResult(Card player1Card, Card player2Card): int
            - calculateDamage(Card attackingCard, Card defendingCard): int
            - determineWinner()
        }

        class ScoreBoard {
            - Map<String, Integer> userScores
            + addUser(String username)
            + updateScore(String username, int score)
            + getScore(String username): int
            + showScoreBoard()
        }

        class TradeService {
            - String tradeId
            - Card offeredCard
            - String requiredCardType
            - int minDamage
            - String offeredByUser
            + validateCardForTrade(Card card): boolean
            + executeTrade(Card buyerCard, Stack buyerStack, Stack sellerStack): boolean
            + getTradeId(): String
            + getOfferedCard(): Card
            + getRequiredCardType(): String
            + getMinDamage(): int
            + getOfferedByUser(): String
        }
    }
}

' Relationships
Database --> SessionController
Database --> UserController
UserController --> User
SessionController --> Session
ClientHandler --> HttpServer
ClientHandler --> UserController
ClientHandler --> SessionController
Deck --> Card
Stack --> Card
Package --> Card
BattleService --> Card
TradeService --> Card
TradeService --> Stack
MonsterType --> MonsterCard
ElementType --> Card
ElementType --> SpellCard

@enduml
